The ``1-my_list`` module
======================

Using ``MyList``
-------------------

Importing from the module:
        >>> MyList = __import__("1-my_list").MyList

module docstring:
         >>> m = __import__("1-my_list").__doc__
         >>> len(m) > 1
         True

class docstring:
         >>> c = __import__("1-my_list").MyList.__doc__
         >>> len(c) > 1
         True

method docstring:
	 >>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
	 >>> len(mod) > 1
	 True

MyList inherits from list:
	 >>> issubclass(MyList, list)
	 True

empty list:
	 >>> l = MyList()
	 >>> l.print_sorted()
	 []

appendng works:
	 >>> l.append(1)
	 >>> l.append(2)
	 >>> l.append(3)
	 >>> l.append(4)
	 >>> print(l)
	 [1, 2, 3, 4]

list already in correct order:
	 >>> l.print_sorted()
	 [1, 2, 3, 4]

reversed order list:
	 >>> l = MyList()
	 >>> l.append(4)
	 >>> l.append(3)
	 >>> l.append(2)
	 >>> l.append(1)
	 >>> print(l)
	 [4, 3, 2, 1]
	 >>> l.print_sorted()
	 [1, 2, 3, 4]
	 >>> print(l)
	 [4, 3, 2, 1]

one negative number:
	 >>> l.append(-5)
	 >>> l.append(6)
	 >>> print(l)
	 [4, 3, 2, 1, -5, 6]
	 >>> l.print_sorted()
	 [-5, 1, 2, 3, 4, 6]
	 >>> print(l)
	 [4, 3, 2, 1, -5, 6]

all negative numbers:
	 >>> l = MyList()
	 >>> l.append(-99)
	 >>> l.append(-50)
	 >>> l.append(-66)
	 >>> l.append(-43)
	 >>> l.append(-67)
	 >>> print(l)
	 [-99, -50, -66, -43, -67]
	 >>> l.print_sorted()
	 [-99, -67, -66, -50, -43]
	 >>> print(l)
         [-99, -50, -66, -43, -67]

too many arguments:
	 >>> l.print_sorted(1)
	 Traceback (most recent call last):
	 ...
	 TypeError: print_sorted() takes 1 positional argument but 2 were given
